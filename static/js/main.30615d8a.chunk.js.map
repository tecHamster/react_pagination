{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","links","i","push","className","href","onClick","items","from","to","numbers","n","getNumbers","map","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","length","firstItem","lastItem","preparedItems","slice","str","id","value","onChange","event","target","htmlFor","page","item","ReactDOM","render","document","getElementById"],"mappings":"yMASaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAQ,GAkBd,IApBI,eAoBKC,GACPD,EAAME,KACJ,oBAAIC,UAAS,oBAAeF,IAAMN,EAAc,SAAW,IAA3D,SACE,mBACE,UAAQ,WACRQ,UAAU,YACVC,KAAI,WAAMH,GACVI,QAAS,kBAAMT,EAAaK,IAJ9B,SAMGA,KAPiEA,KAFjEA,EAAI,EAAGA,GAAKJ,EAAYI,GAAK,EAAI,EAAjCA,GAeT,OACE,qBAAIE,UAAU,aAAd,UACE,oBAAIA,UAAS,oBAA+B,IAAhBR,EAAoB,WAAa,IAA7D,SACE,mBACE,UAAQ,WACRQ,UAAU,YACVC,KAAK,QACL,gBAA+B,IAAhBT,EACfU,QAvCR,WACsB,IAAhBV,GAIJC,EAAaD,EAAc,IA6BvB,oBAUDK,EACD,oBAAIG,UAAS,oBAAeR,IAAgBE,EAAa,WAAa,IAAtE,SACE,mBACE,UAAQ,WACRM,UAAU,YACVC,KAAK,QACL,gBAAeT,IAAgBE,EAC/BQ,QA3CR,WACMV,IAAgBE,GAIpBD,EAAaD,EAAc,IAiCvB,wBC3DR,IAAMW,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQP,KAAKQ,GAGf,OAAOD,EDFKE,CAAW,EAAG,IACzBC,KAAI,SAAAF,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOnB,EAAP,KAAoBoB,EAApB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACMxB,EAAQa,EAAMY,OACdC,GAAaxB,EAAc,GAAKqB,EAChCI,EAAYD,EAAYH,EAAgBvB,EAC1C0B,EAAYH,EACZvB,EAEE4B,EAAgB,YAAIf,GAAOgB,MAAMH,EAAWC,GAC5CG,EAAG,eAAW5B,EAAX,mBAAiCwB,EAAY,EAA7C,cAAoDC,EAApD,eAAmE3B,EAAnE,KAOT,OACE,sBAAKU,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACGoB,IAGH,sBAAKpB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRqB,GAAG,kBACHrB,UAAU,eACVsB,MAAOT,EACPU,SApBV,SAA6BC,GAC3BZ,EAAe,GACfE,GAAiBU,EAAMC,OAAOH,QAaxB,UAOE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB1B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOA,EACPC,QAASsB,EACTrB,YAAaA,EACbC,aAAc,SAACkC,GACbf,EAAee,MAInB,6BACGT,EAAcT,KAAI,SAAAmB,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YE9DlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.30615d8a.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const links = [];\n\n  function prevLinkHandler() {\n    if (currentPage === 1) {\n      return;\n    }\n\n    onPageChange(currentPage - 1);\n  }\n\n  function nextLinkHandler() {\n    if (currentPage === totalPages) {\n      return;\n    }\n\n    onPageChange(currentPage + 1);\n  }\n\n  for (let i = 1; i <= totalPages; i += 1) {\n    links.push(\n      <li className={`page-item ${i === currentPage ? 'active' : ''}`} key={i}>\n        <a\n          data-cy=\"pageLink\"\n          className=\"page-link\"\n          href={`#${i}`}\n          onClick={() => onPageChange(i)}\n        >\n          {i}\n        </a>\n      </li>,\n    );\n  }\n\n  return (\n    <ul className=\"pagination\">\n      <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={prevLinkHandler}\n        >\n          «\n        </a>\n      </li>\n      {links}\n      <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === totalPages}\n          onClick={nextLinkHandler}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const total = items.length;\n  const firstItem = (currentPage - 1) * itemsPerPage;\n  const lastItem = (firstItem + itemsPerPage) < total\n    ? firstItem + itemsPerPage\n    : total;\n\n  const preparedItems = [...items].slice(firstItem, lastItem);\n  const str = `Page ${currentPage} (items ${firstItem + 1} - ${lastItem} of ${total})`;\n\n  function selectChangeHandler(event: React.ChangeEvent<HTMLSelectElement>) {\n    setCurrentPage(1);\n    setItemsPerPage(+event.target.value);\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {str}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={selectChangeHandler}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={(page) => {\n          setCurrentPage(page);\n        }}\n      />\n\n      <ul>\n        {preparedItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}